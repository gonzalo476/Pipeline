#! C:/Program Files/Nuke12.1v2/nuke-12.1.2.dll -nx
#write_info Write1 file:"" format:"3840 2160 1" chans:":rgba.red:rgba.green:rgba.blue:" framerange:"1 741" fps:"24" colorspace:"Cineon" datatype:"16 bit" transfer:"(auto detect)" views:"main" timecode:"01:00:00:00" colorManagement:"Nuke"
version 12.1 v2
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="-1" y="-8" w="1920" h="1009" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="706" stretch="1"/>
            <splitter orientation="2">
                <split size="789"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
                <split size="178"/>
                <dock id="" activePageId="Curve Editor.1">
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
            <split size="619"/>
            <dock id="" activePageId="DAG.1">
                <page id="DAG.1"/>
            </dock>
            <split size="543"/>
            <dock id="" activePageId="Properties.1" focus="true">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name C:/Users/rojas/.nuke/Pipeline/configure_shot/ref.nk
 last_frame 741
 lock_range true
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement Nuke
 workingSpaceLUT linear
 monitorLut sRGB
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
BackdropNode {
 inputs 0
 name BackdropNode1
 tile_color 0xc9c9c9ff
 note_font_size 42
 selected true
 xpos -70
 ypos -563
 bdwidth 180
 bdheight 203
}
BackdropNode {
 inputs 0
 name BackdropNode4
 tile_color 0x997d4dff
 note_font_size 42
 xpos -77
 ypos -214
 bdwidth 190
 bdheight 217
}
StickyNote {
 inputs 0
 name StickyNote1
 label PLATE
 note_font "Verdana Bold"
 note_font_size 41
 selected true
 xpos -52
 ypos -533
}
StickyNote {
 inputs 0
 name StickyNote4
 label OUTPUT
 note_font "Verdana Bold"
 note_font_size 41
 xpos -73
 ypos -192
}
Read {
 inputs 0
 file_type dpx
 file E:/NTPO/plates/NTP_NTFLX_Locked_20250226_VFX_26/NTP_Netflix_Locked_P3_D60_20250226_VFX_26_%05d.dpx
 format "3840 2160 0 0 3840 2160 1 UHD_4K"
 last 741
 frame_mode "start at"
 frame 1001
 origlast 741
 origset true
 name Read1
 selected true
 xpos -22
 ypos -465
}
Dot {
 name Dot2
 xpos 12
 ypos -132
}
Group {
 name out_metadata
 tile_color 0xff
 xpos -22
 ypos -100
}
 Input {
  inputs 0
  name Input1
  xpos -46
  ypos 283
 }
 NoOp {
  name NoOp1
  xpos -46
  ypos 323
 }
 Output {
  name Output1
  xpos -46
  ypos 423
 }
end_group
Write {
 colorspace Cineon
 file_type dpx
 datatype "16 bit"
 create_directories true
 checkHashOnRead false
 name Write1
 xpos -22
 ypos -59
}
Viewer {
 frame 1
 frame_range 1-741
 name Viewer1
 xpos -22
 ypos 199
}
Group {
 inputs 0
 name HexColor
 knobChanged "\ndef int2hex(x):\n    val = hex(x)\[2:]\n    val = \"0\"+val if len(val)<2 else val \n    return val.upper()\n\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\nwith n:\n    sample_forth = nuke.toNode(\"ColorspaceForth\")\n    sample_back = nuke.toNode(\"ColorspaceBack\")\n    \nif k.name() == \"color_float\":\n    corrected_forth_r = nuke.sample(sample_forth, 'red', 0, 0)\n    corrected_forth_g = nuke.sample(sample_forth, 'green', 0, 0)\n    corrected_forth_b = nuke.sample(sample_forth, 'blue', 0, 0)\n    \n    n\['color_8bit_r'].setValue(int(round(corrected_forth_r*255)))\n    n\['color_8bit_g'].setValue(int(round(corrected_forth_g*255)))\n    n\['color_8bit_b'].setValue(int(round(corrected_forth_b*255)))\n    \n    n\['color_hex'].setValue(\"#\" + int2hex(int(round(255*corrected_forth_r))) + int2hex(int(round(255*corrected_forth_g))) + int2hex(int(round(255*corrected_forth_b))))\n    \nelif k.name() == \"color_8bit_r\":\n    corrected_back_r = nuke.sample(sample_back, 'red', 0, 0)\n    n\['color_float'].setValue(corrected_back_r, 0)\n    n\['color_hex'].setValue(\"#\" + int2hex(int(n\['color_8bit_r'].getValue())) + int2hex(int(n\['color_8bit_g'].getValue())) + int2hex(int(n\['color_8bit_b'].getValue())))\n    \nelif k.name() == \"color_8bit_g\":\n    corrected_back_g = nuke.sample(sample_back, 'green', 0, 0)\n    n\['color_float'].setValue(corrected_back_g, 1)\n    n\['color_hex'].setValue(\"#\" + int2hex(int(n\['color_8bit_r'].getValue())) + int2hex(int(n\['color_8bit_g'].getValue())) + int2hex(int(n\['color_8bit_b'].getValue())))\n    \nelif k.name() == \"color_8bit_b\":\n    corrected_back_b = nuke.sample(sample_back, 'blue', 0, 0)\n    n\['color_float'].setValue(corrected_back_b, 2)\n    n\['color_hex'].setValue(\"#\" + int2hex(int(n\['color_8bit_r'].getValue())) + int2hex(int(n\['color_8bit_g'].getValue())) + int2hex(int(n\['color_8bit_b'].getValue())))\n\nelif k.name() == \"color_hex\":\n    hex_r = n\['color_hex'].getValue()\[1:3]\n    hex_g = n\['color_hex'].getValue()\[3:5]\n    hex_b = n\['color_hex'].getValue()\[5:7]\n    \n    int_r = int(hex_r, 16)\n    int_g = int(hex_g, 16)\n    int_b = int(hex_b, 16)\n    \n    n\['color_8bit_r'].setValue(int_r)\n    n\['color_8bit_g'].setValue(int_g)\n    n\['color_8bit_b'].setValue(int_b)\n    \n    corrected_back_r = nuke.sample(sample_back, 'red', 0, 0)\n    corrected_back_g = nuke.sample(sample_back, 'green', 0, 0)\n    corrected_back_b = nuke.sample(sample_back, 'blue', 0, 0)\n    \n    n\['color_float'].setValue(corrected_back_r, 0)\n    n\['color_float'].setValue(corrected_back_g, 1)\n    n\['color_float'].setValue(corrected_back_b, 2)\n\nmyHex = n\['color_hex'].getValue()\[1:] + \"00\"\nnukeHex = int(myHex, 16)\nn.knob('tile_color').setValue(nukeHex)\n"
 tile_color 0xe6e6e600
 label "\[value this.color_hex]"
 note_font_color 0xff
 xpos 65
 ypos -299
 addUserKnob {20 User l "Color Modes"}
 addUserKnob {26 title l "" +STARTLINE T "<font color=#ff8300 size=\"5\">HexColor</font><font color=#ff8300 size=\"2\"> v1.0</font>"}
 addUserKnob {26 divider_general l " "}
 addUserKnob {41 format l Format T OutputColor.format}
 addUserKnob {41 colorspace l Colorspace t "sRGB should work in the most cases. I.E. converting a web #hex color to Nuke's linear workspace.\nChanging the colorspace does not update the colors immediately since the reference point is missing. Change a color value to apply the changes to the other color values respectively." T ColorspaceForth.colorspace_out}
 addUserKnob {26 divider_color l " "}
 addUserKnob {1 color_hex l Hex t "requires a hashtag # at the beginning"}
 color_hex #E6E6E6
 addUserKnob {18 color_float l Float t "This value is used to color the output image"}
 color_float 0.7882353067
 addUserKnob {6 color_float_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 color_8bit_label l 8bit T ""}
 addUserKnob {3 color_8bit_r l "<font color=#c34b4b>R</font>" -STARTLINE}
 color_8bit_r 230
 addUserKnob {3 color_8bit_g l "<font color=#5b9c5b>G</font>" -STARTLINE}
 color_8bit_g 230
 addUserKnob {3 color_8bit_b l "<font color=#3367a9>B</font>" -STARTLINE}
 color_8bit_b 230
 addUserKnob {20 About}
 addUserKnob {26 title_1 l "" +STARTLINE T "<font color=#ff8300 size=\"5\">HexColor</font><font color=#ff8300 size=\"2\"> v1.0</font>"}
 addUserKnob {26 author l "" +STARTLINE T "by Nikolai WÃ¼stemann"}
 addUserKnob {26 ""}
 addUserKnob {26 description l Description T "- This Node workes like a regular Constant.\n- Changing one color value changes all other values respectively \n- Colorspace conversions are taken into consideration\n- This is necessary to produce a valid represtation of  i.E. web #hex colors in Nuke."}
}
 Constant {
  inputs 0
  channels rgb
  color {{"\[value this.parent.color_8bit_r]/255"} {"\[value this.parent.color_8bit_g]/255"} {"\[value this.parent.color_8bit_b]/255"} 0}
  name ConversionColor
  xpos 394
  ypos -112
 }
 Colorspace {
  colorspace_in sRGB
  name ColorspaceBack
  selected true
  xpos 394
  ypos 9
 }
 Constant {
  inputs 0
  channels rgb
  color {{"\[value this.parent.color_float.r]"} {"\[value this.parent.color_float.g]"} {"\[value this.parent.color_float.b]"} {"\[value this.parent.color_float.a]"}}
  name OutputColor
  xpos 557
  ypos -116
 }
set N4e78a400 [stack 0]
 Colorspace {
  colorspace_out sRGB
  name ColorspaceForth
  knobChanged "id = nuke.thisNode().knob(\"colorspace_out\").getValue()\nnuke.toNode(\"ColorspaceBack\").knob(\"colorspace_in\").setValue(int(id))"
  xpos 557
  ypos 11
 }
push $N4e78a400
 Output {
  name Output1
  xpos 741
  ypos 14
 }
end_group
